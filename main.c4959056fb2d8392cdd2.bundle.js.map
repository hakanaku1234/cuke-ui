{"version":3,"file":"main.c4959056fb2d8392cdd2.bundle.js","sources":["webpack:///./components/input/index.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport cls from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nexport default class Input extends PureComponent {\n  static defaultProps = {\n    prefixCls: \"cuke-input\",\n    disabled: false,\n    readonly: false,\n    placeholder: \"\",\n    type: \"text\",\n    onChange: () => {}\n  };\n\n  static propTypes = {\n    prefixCls: PropTypes.string.isRequired,\n    placeholder: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.string,\n      PropTypes.object\n    ]),\n    addonClassName: PropTypes.string,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    type: PropTypes.oneOf([\n      \"text\",\n      \"password\",\n      \"range\",\n      \"date\",\n      \"number\",\n      \"color\",\n      \"email\"\n    ]),\n    value: PropTypes.string,\n    defaultValue: PropTypes.string,\n    onChange: PropTypes.func\n  };\n\n  render() {\n    const {\n      type,\n      placeholder,\n      prefixCls,\n      className,\n      disabled,\n      readonly,\n      addonBefore,\n      addonAfter,\n      addonClassName,\n      ...attr\n    } = this.props;\n\n    const inputEle = (\n      <input\n        type={type}\n        disabled={disabled}\n        readOnly={readonly}\n        className={cls(prefixCls, className, {\n          [`${prefixCls}-disabled`]: disabled\n        })}\n        placeholder={placeholder}\n        {...attr}\n      />\n    );\n\n    if (addonBefore || addonAfter) {\n      return (\n        <span\n          className={cls(\n            `${prefixCls}-group`,\n            { [`${prefixCls}-group-addon-before`]: !!addonBefore },\n            { [`${prefixCls}-group-addon-after`]: !!addonAfter },\n            { [`${prefixCls}-group-addon-all`]: !!addonAfter && !!addonBefore },\n            addonClassName\n          )}\n        >\n          {addonBefore ? (\n            <span className={`${prefixCls}-group-addon`}>{addonBefore}</span>\n          ) : (\n            undefined\n          )}\n          {inputEle}\n          {addonAfter ? (\n            <span className={`${prefixCls}-group-addon`}>{addonAfter}</span>\n          ) : (\n            undefined\n          )}\n        </span>\n      );\n    }\n    return inputEle;\n  }\n}\n"],"mappings":"AAAA","sourceRoot":""}